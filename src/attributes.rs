#![allow(non_snake_case)]
//! This module implements a subset of dot language [attributes](https://graphviz.org/doc/info/attrs.html).
//! These functions will generate some predefined `AttrPair`s that be used together with
//! the `add_attrpair` function of `Edge` and the `add_pair` function of `AttrList`.
//! Notice that only an incomplete subset is implemented due to the limitations of the function prototype
//! and type system.
//! To add other attributes, you can use an unsafe way to construct an identity pair.
//! ```
//! use tabbycat::Identity;
//! let my_pair = (Identity::String("label".into()), Identity::Quoted(std::borrow::Cow::Borrowed("test")));
//! ```
//! (Most of the time the safe way (`Identity::id`) should be good, but as we didn't provide a type for something like the
//! [`lblString`](https://graphviz.org/doc/info/attrs.html#k:lblString), you may want to add a unquoted string using the *unsafe* way.)
use std::hint::unreachable_unchecked;

use crate::{AttrPair, Identity};

macro_rules! attribute_from {
    ($id:ident, $t:ty) => {
        pub fn $id<'a>(value: $t) -> AttrPair<'a> {
            (
                Identity::String(stringify!($id).into()),
                Identity::from(value),
            )
        }
    };
}

macro_rules! attribute_quoted {
    ($id:ident) => {
        pub fn $id<'a, S>(value: S) -> AttrPair<'a>
        where
            S: Into<std::borrow::Cow<'a, str>>,
        {
            (
                Identity::String(stringify!($id).into()),
                Identity::quoted(value),
            )
        }
    };
}

attribute_from!(Damping, f64);
attribute_from!(K, f64);
attribute_quoted!(URL);
attribute_quoted!(_backgroud);
attribute_from!(area, f64);
attribute_from!(arrowsize, f64);
attribute_from!(center, bool);
attribute_quoted!(charset);
attribute_quoted!(class);
attribute_quoted!(colorscheme);
attribute_quoted!(comment);
attribute_from!(compound, bool);
attribute_from!(concentrate, bool);
attribute_from!(constraint, bool);
attribute_from!(decorate, bool);
attribute_from!(defaultdist, f64);
attribute_from!(dim, u8);
attribute_from!(dimen, u8);
attribute_from!(diredgeconstraints, bool);
attribute_from!(distortion, f64);
attribute_from!(dpi, f64);
attribute_quoted!(edgeURL);
attribute_quoted!(edgehref);
attribute_quoted!(edgetarget);
attribute_quoted!(edgetooltip);
attribute_from!(epsilon, f64);
attribute_quoted!(fontname);
attribute_quoted!(fontnames);
attribute_quoted!(fontpath);
attribute_from!(fontsize, f64);
attribute_from!(forcelables, bool);
attribute_from!(gradientangle, i32);
attribute_quoted!(group);
attribute_quoted!(headURL);
attribute_from!(headclip, bool);
attribute_quoted!(headhref);
attribute_quoted!(headlabel);
attribute_quoted!(headtarget);
attribute_quoted!(headtooltip);
attribute_from!(height, f64);
attribute_quoted!(href);
attribute_quoted!(id);
attribute_quoted!(image);
attribute_quoted!(imagepath);
attribute_quoted!(imagepos);
attribute_from!(imagescale, bool);
attribute_from!(inputscale, f64);
attribute_quoted!(label);
attribute_quoted!(labelURL);
attribute_from!(label_scheme, i32);
attribute_from!(labelangle, f64);
attribute_from!(labeldistance, f64);
attribute_from!(labelfloat, bool);
attribute_quoted!(labelfontname);
attribute_from!(labelfontsize, f64);
attribute_quoted!(labelhref);
attribute_quoted!(labeljust);
attribute_quoted!(labelloc);
attribute_quoted!(labeltarget);
attribute_quoted!(labeltooltip);
attribute_from!(landscape, bool);
attribute_quoted!(layerlistsep);
attribute_quoted!(layersep);
attribute_quoted!(layout);
attribute_from!(len, f64);
attribute_from!(levels, i32);
attribute_from!(levelsgap, f64);
attribute_quoted!(lhead);
attribute_from!(lheight, f64);
attribute_quoted!(ltail);
attribute_from!(lwidth, f64);
attribute_from!(margin, f64);
attribute_from!(maxiter, i32);
attribute_from!(mclimit, f64);
attribute_from!(mindist, f64);
attribute_from!(minlen, i32);
attribute_quoted!(mode);
attribute_quoted!(model);
attribute_from!(mosek, bool);
attribute_from!(newrank, bool);
attribute_from!(nodesep, f64);
attribute_from!(nojustify, bool);
attribute_from!(normalize, f64);
attribute_from!(notranslate, bool);
attribute_from!(nslimit, f64);
attribute_from!(nslimit1, f64);
attribute_quoted!(ordering);
attribute_from!(orientation, f64);
attribute_from!(overlap_scaling, f64);
attribute_from!(overlap_shrink, bool);
attribute_from!(pad, f64);
attribute_from!(page, f64);
attribute_from!(penwidth, f64);
attribute_from!(peripheries, i32);
attribute_from!(pin, bool);
attribute_from!(quantum, f64);
attribute_from!(ranksep, f64);
attribute_from!(ratio, f64);
attribute_from!(regular, bool);
attribute_from!(remincross, bool);
attribute_from!(repulsiveforce, f64);
attribute_from!(resolution, f64);
attribute_quoted!(root);
attribute_from!(rotate, i32);
attribute_from!(rotation, f64);
attribute_quoted!(samehead);
attribute_quoted!(sametail);
attribute_from!(samplepoints, i32);
attribute_from!(scale, f64);
attribute_from!(searchsize, i32);
attribute_quoted!(shapefile);
attribute_from!(showboxes, i32);
attribute_from!(sides, i32);
attribute_from!(size, f64);
attribute_from!(skew, f64);
attribute_from!(sortv, i32);
attribute_quoted!(stylesheet);
attribute_quoted!(tailURL);
attribute_from!(tailclip, bool);
attribute_quoted!(tailhref);
attribute_quoted!(taillabel);
attribute_quoted!(tailtarget);
attribute_quoted!(tailtooltip);
attribute_quoted!(target);
attribute_quoted!(tooltip);
attribute_from!(truecolor, bool);
attribute_from!(voro_margin, f64);
attribute_from!(weight, f64);
attribute_from!(width, f64);
attribute_quoted!(xdotversion);
attribute_quoted!(xlabel);
attribute_from!(z, f64);
attribute_from!(bgcolor, Color);
attribute_from!(color, Color);
attribute_from!(fillcolor, Color);
attribute_from!(labelfontcolor, Color);
attribute_from!(pencolor, Color);
attribute_from!(shape, Shape);
attribute_from!(style, Style);
attribute_from!(dir, DirType);
attribute_from!(smoothing, SmoothType);
attribute_from!(rankdir, RankDir);
attribute_from!(rank, RankType);
attribute_from!(quadtree, QuadType);
attribute_from!(pagedir, PageDir);
attribute_from!(clusterrank, ClusterMode);
attribute_from!(outputorder, OutputMode);
attribute_from!(head_lp, Point);
attribute_from!(lp, Point);
attribute_from!(pos, Point);
attribute_from!(tail_lp, Point);
attribute_from!(xlp, Point);
pub fn arrowhead<'a>(value: ArrowShape) -> AttrPair<'a> {
    (
        Identity::String("arrowhead".into()),
        Identity::ArrowName([Some(arrow_str(value)), None, None, None]),
    )
}

pub fn arrowhead2<'a>(a: ArrowShape, b: ArrowShape) -> AttrPair<'a> {
    (
        Identity::String("arrowhead".into()),
        Identity::ArrowName([Some(arrow_str(a)), Some(arrow_str(b)), None, None]),
    )
}

pub fn arrowhead3<'a>(a: ArrowShape, b: ArrowShape, c: ArrowShape) -> AttrPair<'a> {
    (
        Identity::String("arrowhead".into()),
        Identity::ArrowName([
            Some(arrow_str(a)),
            Some(arrow_str(b)),
            Some(arrow_str(c)),
            None,
        ]),
    )
}

pub fn arrowhead4<'a>(a: ArrowShape, b: ArrowShape, c: ArrowShape, d: ArrowShape) -> AttrPair<'a> {
    (
        Identity::String("arrowhead".into()),
        Identity::ArrowName([
            Some(arrow_str(a)),
            Some(arrow_str(b)),
            Some(arrow_str(c)),
            Some(arrow_str(d)),
        ]),
    )
}

pub fn arrowtail<'a>(value: ArrowShape) -> AttrPair<'a> {
    (
        Identity::String("arrowtail".into()),
        Identity::ArrowName([Some(arrow_str(value)), None, None, None]),
    )
}

pub fn arrowtail2<'a>(a: ArrowShape, b: ArrowShape) -> AttrPair<'a> {
    (
        Identity::String("arrowtail".into()),
        Identity::ArrowName([Some(arrow_str(a)), Some(arrow_str(b)), None, None]),
    )
}

pub fn arrowtail3<'a>(a: ArrowShape, b: ArrowShape, c: ArrowShape) -> AttrPair<'a> {
    (
        Identity::String("arrowtail".into()),
        Identity::ArrowName([
            Some(arrow_str(a)),
            Some(arrow_str(b)),
            Some(arrow_str(c)),
            None,
        ]),
    )
}

pub fn arrowtail4<'a>(a: ArrowShape, b: ArrowShape, c: ArrowShape, d: ArrowShape) -> AttrPair<'a> {
    (
        Identity::String("arrowtail".into()),
        Identity::ArrowName([
            Some(arrow_str(a)),
            Some(arrow_str(b)),
            Some(arrow_str(c)),
            Some(arrow_str(d)),
        ]),
    )
}
/// Smoothing Method
#[derive(Debug)]
pub enum SmoothType {
    None,
    AvgDist,
    GraphDist,
    PowerDist,
    RNG,
    Spring,
    Triangle,
}

impl<'a> From<SmoothType> for Identity<'a> {
    fn from(dir: SmoothType) -> Self {
        Identity::String(match dir {
            SmoothType::None => "none".into(),
            SmoothType::AvgDist => "avg_dist".into(),
            SmoothType::GraphDist => "graph_dist".into(),
            SmoothType::PowerDist => "power_dist".into(),
            SmoothType::RNG => "rng".into(),
            SmoothType::Spring => "spring".into(),
            SmoothType::Triangle => "triangle".into(),
        })
    }
}
/// Rank Direction
#[derive(Debug)]
pub enum RankDir {
    TB,
    LR,
    BT,
    RL,
}

impl<'a> From<RankDir> for Identity<'a> {
    fn from(dir: RankDir) -> Self {
        Identity::String(match dir {
            RankDir::TB => "TB".into(),
            RankDir::LR => "LR".into(),
            RankDir::BT => "BT".into(),
            RankDir::RL => "RL".into(),
        })
    }
}

/// Ranking method
#[derive(Debug)]
pub enum RankType {
    Same,
    Min,
    Source,
    Max,
    Sink,
}

impl<'a> From<RankType> for Identity<'a> {
    fn from(dir: RankType) -> Self {
        Identity::String(match dir {
            RankType::Same => "same".into(),
            RankType::Min => "min".into(),
            RankType::Source => "source".into(),
            RankType::Max => "max".into(),
            RankType::Sink => "sink".into(),
        })
    }
}

/// Quadtree Algorithm
#[derive(Debug)]
pub enum QuadType {
    Normal,
    Fast,
    None,
}

impl<'a> From<QuadType> for Identity<'a> {
    fn from(dir: QuadType) -> Self {
        Identity::String(match dir {
            QuadType::None => "none".into(),
            QuadType::Normal => "normal".into(),
            QuadType::Fast => "fast".into(),
        })
    }
}

/// Point type in the dot language
pub enum Point {
    Point2D { x: f32, y: f32, fixed: bool },
    Point3D { x: f32, y: f32, z: f32, fixed: bool },
}

impl<'a> From<Point> for Identity<'a> {
    fn from(dir: Point) -> Self {
        match dir {
            Point::Point2D { x, y, fixed } => Identity::Point2D(x, y, fixed),
            Point::Point3D { x, y, z, fixed } => Identity::Point3D(x, y, z, fixed),
        }
    }
}
/// Paging Direction
#[derive(Debug)]
pub enum PageDir {
    BL,
    BR,
    TL,
    TR,
    RB,
    RT,
    LB,
    LT,
}

impl<'a> From<PageDir> for Identity<'a> {
    fn from(dir: PageDir) -> Self {
        Identity::String(match dir {
            PageDir::BL => "BL".into(),
            PageDir::BR => "BR".into(),
            PageDir::TL => "TL".into(),
            PageDir::TR => "TR".into(),
            PageDir::RB => "RB".into(),
            PageDir::RT => "RT".into(),
            PageDir::LB => "LB".into(),
            PageDir::LT => "LT".into(),
        })
    }
}
/// Clustering Mode
#[derive(Debug)]
pub enum ClusterMode {
    Local,
    Global,
    None,
}

impl<'a> From<ClusterMode> for Identity<'a> {
    fn from(dir: ClusterMode) -> Self {
        Identity::String(match dir {
            ClusterMode::Local => "local".into(),
            ClusterMode::Global => "global".into(),
            ClusterMode::None => "none".into(),
        })
    }
}

/// Output mode
#[derive(Debug)]
pub enum OutputMode {
    BreadthFirst,
    NodesFirst,
    EdgesFirst,
}

impl<'a> From<OutputMode> for Identity<'a> {
    fn from(dir: OutputMode) -> Self {
        Identity::String(match dir {
            OutputMode::BreadthFirst => "breadthfirst".into(),
            OutputMode::NodesFirst => "nodesfirst".into(),
            OutputMode::EdgesFirst => "edgesfirst".into(),
        })
    }
}

/// Arrow direction
#[derive(Debug)]
pub enum DirType {
    Forward,
    Back,
    Both,
    None,
}

impl<'a> From<DirType> for Identity<'a> {
    fn from(dir: DirType) -> Self {
        Identity::String(match dir {
            DirType::Forward => "forward".into(),
            DirType::Back => "back".into(),
            DirType::Both => "both".into(),
            DirType::None => "none".into(),
        })
    }
}

/// Styles, see the [document](https://www.graphviz.org/doc/info/attrs.html#k:style)
#[derive(Debug)]
pub enum Style {
    None,
    Invisible,
    Solid,
    Dashed,
    Dotted,
    Bold,
    Rounded,
    Diagonals,
    Filled,
    Striped,
    Wedged,
}

impl<'a> From<Style> for Identity<'a> {
    fn from(dir: Style) -> Self {
        Identity::String(match dir {
            Style::None => "none".into(),
            Style::Invisible => "invisible".into(),
            Style::Solid => "solid".into(),
            Style::Dashed => "dashed".into(),
            Style::Dotted => "dotted".into(),
            Style::Bold => "bold".into(),
            Style::Rounded => "rounded".into(),
            Style::Diagonals => "diagonals".into(),
            Style::Filled => "filled".into(),
            Style::Striped => "striped".into(),
            Style::Wedged => "wedged".into(),
        })
    }
}

/// Shapes of the node
#[derive(Debug)]
pub enum Shape {
    Box,
    Polygon,
    Ellipse,
    Oval,
    Circle,
    Point,
    Egg,
    Triangle,
    Plaintext,
    Plain,
    Diamond,
    Trapezium,
    Parallelogram,
    House,
    Pentagon,
    Hexagon,
    Septagon,
    Octagon,
    Doublecircle,
    Doubleoctagon,
    Tripleoctagon,
    Invtriangle,
    Invtrapezium,
    Invhouse,
    Mdiamond,
    Msquare,
    Mcircle,
    Rect,
    Rectangle,
    Square,
    Star,
    None,
    Underline,
    Cylinder,
    Note,
    Tab,
    Folder,
    Box3d,
    Component,
    Promoter,
    Cds,
    Terminator,
    Utr,
    Primersite,
    Restrictionsite,
    Fivepoverhang,
    Threepoverhang,
    Noverhang,
    Assembly,
    Signature,
    Insulator,
    Ribosite,
    Rnastab,
    Proteasesite,
    Proteinstab,
    Rpromoter,
    Rarrow,
    Larrow,
    Lpromoter,
}

/// Shapes of the arrow. Notice that the dot language has a [special syntax](https://graphviz.org/doc/info/arrows.html) for creating different arrow shapes.
/// We actually expand all `[modifier] primitive shapes` here and you can you the functions like `arrowhead2`, `arrowhead3`, `arrowhead4` to repeat the patterns.
pub enum ArrowShape {
    Olbox,
    Olcrow,
    Olcurve,
    Olicurve,
    Oldiamond,
    Oldot,
    Olinv,
    Olnone,
    Olnormal,
    Oltee,
    Olvee,
    Orbox,
    Orcrow,
    Orcurve,
    Oricurve,
    Ordiamond,
    Ordot,
    Orinv,
    Ornone,
    Ornormal,
    Ortee,
    Orvee,
    Lbox,
    Lcrow,
    Lcurve,
    Licurve,
    Ldiamond,
    Ldot,
    Linv,
    Lnone,
    Lnormal,
    Ltee,
    Lvee,
    Rbox,
    Rcrow,
    Rcurve,
    Ricurve,
    Rdiamond,
    Rdot,
    Rinv,
    Rnone,
    Rnormal,
    Rtee,
    Rvee,
    Box,
    Crow,
    Curve,
    Icurve,
    Diamond,
    Dot,
    Inv,
    None,
    Normal,
    Tee,
    Vee,
}

/// A list of [colors](https://graphviz.org/doc/info/colors.html) that can be used in the dot language.
/// Notice that we are actually listing a union of `X11` colors and `SVG` colors, you should be aware of
/// what color scheme you are really using.
/// For unlisted colors, see the instructions above on how to implement your own attribute pairs.
pub enum Color {
    Rgb(u8, u8, u8),
    Rgba(u8, u8, u8, u8),
    HSV(f32, f32, f32),
    Aliceblue,
    Antiquewhite,
    Antiquewhite1,
    Antiquewhite2,
    Antiquewhite3,
    Antiquewhite4,
    Aqua,
    Aquamarine,
    Aquamarine1,
    Aquamarine2,
    Aquamarine3,
    Aquamarine4,
    Azure,
    Azure1,
    Azure2,
    Azure3,
    Azure4,
    Beige,
    Bisque,
    Bisque1,
    Bisque2,
    Bisque3,
    Bisque4,
    Black,
    Blanchedalmond,
    Blue,
    Blue1,
    Blue2,
    Blue3,
    Blue4,
    Blueviolet,
    Brown,
    Brown1,
    Brown2,
    Brown3,
    Brown4,
    Burlywood,
    Burlywood1,
    Burlywood2,
    Burlywood3,
    Burlywood4,
    Cadetblue,
    Cadetblue1,
    Cadetblue2,
    Cadetblue3,
    Cadetblue4,
    Chartreuse,
    Chartreuse1,
    Chartreuse2,
    Chartreuse3,
    Chartreuse4,
    Chocolate,
    Chocolate1,
    Chocolate2,
    Chocolate3,
    Chocolate4,
    Coral,
    Coral1,
    Coral2,
    Coral3,
    Coral4,
    Cornflowerblue,
    Cornsilk,
    Cornsilk1,
    Cornsilk2,
    Cornsilk3,
    Cornsilk4,
    Crimson,
    Cyan,
    Cyan1,
    Cyan2,
    Cyan3,
    Cyan4,
    Darkblue,
    Darkcyan,
    Darkgoldenrod,
    Darkgoldenrod1,
    Darkgoldenrod2,
    Darkgoldenrod3,
    Darkgoldenrod4,
    Darkgray,
    Darkgreen,
    Darkgrey,
    Darkkhaki,
    Darkmagenta,
    Darkolivegreen,
    Darkolivegreen1,
    Darkolivegreen2,
    Darkolivegreen3,
    Darkolivegreen4,
    Darkorange,
    Darkorange1,
    Darkorange2,
    Darkorange3,
    Darkorange4,
    Darkorchid,
    Darkorchid1,
    Darkorchid2,
    Darkorchid3,
    Darkorchid4,
    Darkred,
    Darksalmon,
    Darkseagreen,
    Darkseagreen1,
    Darkseagreen2,
    Darkseagreen3,
    Darkseagreen4,
    Darkslateblue,
    Darkslategray,
    Darkslategray1,
    Darkslategray2,
    Darkslategray3,
    Darkslategray4,
    Darkslategrey,
    Darkturquoise,
    Darkviolet,
    Deeppink,
    Deeppink1,
    Deeppink2,
    Deeppink3,
    Deeppink4,
    Deepskyblue,
    Deepskyblue1,
    Deepskyblue2,
    Deepskyblue3,
    Deepskyblue4,
    Dimgray,
    Dimgrey,
    Dodgerblue,
    Dodgerblue1,
    Dodgerblue2,
    Dodgerblue3,
    Dodgerblue4,
    Firebrick,
    Firebrick1,
    Firebrick2,
    Firebrick3,
    Firebrick4,
    Floralwhite,
    Forestgreen,
    Fuchsia,
    Gainsboro,
    Ghostwhite,
    Gold,
    Gold1,
    Gold2,
    Gold3,
    Gold4,
    Goldenrod,
    Goldenrod1,
    Goldenrod2,
    Goldenrod3,
    Goldenrod4,
    Gray,
    Gray0,
    Gray1,
    Gray10,
    Gray100,
    Gray11,
    Gray12,
    Gray13,
    Gray14,
    Gray15,
    Gray16,
    Gray17,
    Gray18,
    Gray19,
    Gray2,
    Gray20,
    Gray21,
    Gray22,
    Gray23,
    Gray24,
    Gray25,
    Gray26,
    Gray27,
    Gray28,
    Gray29,
    Gray3,
    Gray30,
    Gray31,
    Gray32,
    Gray33,
    Gray34,
    Gray35,
    Gray36,
    Gray37,
    Gray38,
    Gray39,
    Gray4,
    Gray40,
    Gray41,
    Gray42,
    Gray43,
    Gray44,
    Gray45,
    Gray46,
    Gray47,
    Gray48,
    Gray49,
    Gray5,
    Gray50,
    Gray51,
    Gray52,
    Gray53,
    Gray54,
    Gray55,
    Gray56,
    Gray57,
    Gray58,
    Gray59,
    Gray6,
    Gray60,
    Gray61,
    Gray62,
    Gray63,
    Gray64,
    Gray65,
    Gray66,
    Gray67,
    Gray68,
    Gray69,
    Gray7,
    Gray70,
    Gray71,
    Gray72,
    Gray73,
    Gray74,
    Gray75,
    Gray76,
    Gray77,
    Gray78,
    Gray79,
    Gray8,
    Gray80,
    Gray81,
    Gray82,
    Gray83,
    Gray84,
    Gray85,
    Gray86,
    Gray87,
    Gray88,
    Gray89,
    Gray9,
    Gray90,
    Gray91,
    Gray92,
    Gray93,
    Gray94,
    Gray95,
    Gray96,
    Gray97,
    Gray98,
    Gray99,
    Green,
    Green1,
    Green2,
    Green3,
    Green4,
    Greenyellow,
    Grey,
    Grey0,
    Grey1,
    Grey10,
    Grey100,
    Grey11,
    Grey12,
    Grey13,
    Grey14,
    Grey15,
    Grey16,
    Grey17,
    Grey18,
    Grey19,
    Grey2,
    Grey20,
    Grey21,
    Grey22,
    Grey23,
    Grey24,
    Grey25,
    Grey26,
    Grey27,
    Grey28,
    Grey29,
    Grey3,
    Grey30,
    Grey31,
    Grey32,
    Grey33,
    Grey34,
    Grey35,
    Grey36,
    Grey37,
    Grey38,
    Grey39,
    Grey4,
    Grey40,
    Grey41,
    Grey42,
    Grey43,
    Grey44,
    Grey45,
    Grey46,
    Grey47,
    Grey48,
    Grey49,
    Grey5,
    Grey50,
    Grey51,
    Grey52,
    Grey53,
    Grey54,
    Grey55,
    Grey56,
    Grey57,
    Grey58,
    Grey59,
    Grey6,
    Grey60,
    Grey61,
    Grey62,
    Grey63,
    Grey64,
    Grey65,
    Grey66,
    Grey67,
    Grey68,
    Grey69,
    Grey7,
    Grey70,
    Grey71,
    Grey72,
    Grey73,
    Grey74,
    Grey75,
    Grey76,
    Grey77,
    Grey78,
    Grey79,
    Grey8,
    Grey80,
    Grey81,
    Grey82,
    Grey83,
    Grey84,
    Grey85,
    Grey86,
    Grey87,
    Grey88,
    Grey89,
    Grey9,
    Grey90,
    Grey91,
    Grey92,
    Grey93,
    Grey94,
    Grey95,
    Grey96,
    Grey97,
    Grey98,
    Grey99,
    Honeydew,
    Honeydew1,
    Honeydew2,
    Honeydew3,
    Honeydew4,
    Hotpink,
    Hotpink1,
    Hotpink2,
    Hotpink3,
    Hotpink4,
    Indianred,
    Indianred1,
    Indianred2,
    Indianred3,
    Indianred4,
    Indigo,
    Invis,
    Ivory,
    Ivory1,
    Ivory2,
    Ivory3,
    Ivory4,
    Khaki,
    Khaki1,
    Khaki2,
    Khaki3,
    Khaki4,
    Lavender,
    Lavenderblush,
    Lavenderblush1,
    Lavenderblush2,
    Lavenderblush3,
    Lavenderblush4,
    Lawngreen,
    Lemonchiffon,
    Lemonchiffon1,
    Lemonchiffon2,
    Lemonchiffon3,
    Lemonchiffon4,
    Lightblue,
    Lightblue1,
    Lightblue2,
    Lightblue3,
    Lightblue4,
    Lightcoral,
    Lightcyan,
    Lightcyan1,
    Lightcyan2,
    Lightcyan3,
    Lightcyan4,
    Lightgoldenrod,
    Lightgoldenrod1,
    Lightgoldenrod2,
    Lightgoldenrod3,
    Lightgoldenrod4,
    Lightgoldenrodyellow,
    Lightgray,
    Lightgreen,
    Lightgrey,
    Lightpink,
    Lightpink1,
    Lightpink2,
    Lightpink3,
    Lightpink4,
    Lightsalmon,
    Lightsalmon1,
    Lightsalmon2,
    Lightsalmon3,
    Lightsalmon4,
    Lightseagreen,
    Lightskyblue,
    Lightskyblue1,
    Lightskyblue2,
    Lightskyblue3,
    Lightskyblue4,
    Lightslateblue,
    Lightslategray,
    Lightslategrey,
    Lightsteelblue,
    Lightsteelblue1,
    Lightsteelblue2,
    Lightsteelblue3,
    Lightsteelblue4,
    Lightyellow,
    Lightyellow1,
    Lightyellow2,
    Lightyellow3,
    Lightyellow4,
    Lime,
    Limegreen,
    Linen,
    Magenta,
    Magenta1,
    Magenta2,
    Magenta3,
    Magenta4,
    Maroon,
    Maroon1,
    Maroon2,
    Maroon3,
    Maroon4,
    Mediumaquamarine,
    Mediumblue,
    Mediumorchid,
    Mediumorchid1,
    Mediumorchid2,
    Mediumorchid3,
    Mediumorchid4,
    Mediumpurple,
    Mediumpurple1,
    Mediumpurple2,
    Mediumpurple3,
    Mediumpurple4,
    Mediumseagreen,
    Mediumslateblue,
    Mediumspringgreen,
    Mediumturquoise,
    Mediumvioletred,
    Midnightblue,
    Mintcream,
    Mistyrose,
    Mistyrose1,
    Mistyrose2,
    Mistyrose3,
    Mistyrose4,
    Moccasin,
    Navajowhite,
    Navajowhite1,
    Navajowhite2,
    Navajowhite3,
    Navajowhite4,
    Navy,
    Navyblue,
    None,
    Oldlace,
    Olive,
    Olivedrab,
    Olivedrab1,
    Olivedrab2,
    Olivedrab3,
    Olivedrab4,
    Orange,
    Orange1,
    Orange2,
    Orange3,
    Orange4,
    Orangered,
    Orangered1,
    Orangered2,
    Orangered3,
    Orangered4,
    Orchid,
    Orchid1,
    Orchid2,
    Orchid3,
    Orchid4,
    Palegoldenrod,
    Palegreen,
    Palegreen1,
    Palegreen2,
    Palegreen3,
    Palegreen4,
    Paleturquoise,
    Paleturquoise1,
    Paleturquoise2,
    Paleturquoise3,
    Paleturquoise4,
    Palevioletred,
    Palevioletred1,
    Palevioletred2,
    Palevioletred3,
    Palevioletred4,
    Papayawhip,
    Peachpuff,
    Peachpuff1,
    Peachpuff2,
    Peachpuff3,
    Peachpuff4,
    Peru,
    Pink,
    Pink1,
    Pink2,
    Pink3,
    Pink4,
    Plum,
    Plum1,
    Plum2,
    Plum3,
    Plum4,
    Powderblue,
    Purple,
    Purple1,
    Purple2,
    Purple3,
    Purple4,
    Red,
    Red1,
    Red2,
    Red3,
    Red4,
    Rosybrown,
    Rosybrown1,
    Rosybrown2,
    Rosybrown3,
    Rosybrown4,
    Royalblue,
    Royalblue1,
    Royalblue2,
    Royalblue3,
    Royalblue4,
    Saddlebrown,
    Salmon,
    Salmon1,
    Salmon2,
    Salmon3,
    Salmon4,
    Sandybrown,
    Seagreen,
    Seagreen1,
    Seagreen2,
    Seagreen3,
    Seagreen4,
    Seashell,
    Seashell1,
    Seashell2,
    Seashell3,
    Seashell4,
    Sienna,
    Sienna1,
    Sienna2,
    Sienna3,
    Sienna4,
    Silver,
    Skyblue,
    Skyblue1,
    Skyblue2,
    Skyblue3,
    Skyblue4,
    Slateblue,
    Slateblue1,
    Slateblue2,
    Slateblue3,
    Slateblue4,
    Slategray,
    Slategray1,
    Slategray2,
    Slategray3,
    Slategray4,
    Slategrey,
    Snow,
    Snow1,
    Snow2,
    Snow3,
    Snow4,
    Springgreen,
    Springgreen1,
    Springgreen2,
    Springgreen3,
    Springgreen4,
    Steelblue,
    Steelblue1,
    Steelblue2,
    Steelblue3,
    Steelblue4,
    Tan,
    Tan1,
    Tan2,
    Tan3,
    Tan4,
    Teal,
    Thistle,
    Thistle1,
    Thistle2,
    Thistle3,
    Thistle4,
    Tomato,
    Tomato1,
    Tomato2,
    Tomato3,
    Tomato4,
    Transparent,
    Turquoise,
    Turquoise1,
    Turquoise2,
    Turquoise3,
    Turquoise4,
    Violet,
    Violetred,
    Violetred1,
    Violetred2,
    Violetred3,
    Violetred4,
    Wheat,
    Wheat1,
    Wheat2,
    Wheat3,
    Wheat4,
    White,
    Whitesmoke,
    Yellow,
    Yellow1,
    Yellow2,
    Yellow3,
    Yellow4,
    Yellowgreen,
}

impl<'a> From<Shape> for Identity<'a> {
    fn from(shape: Shape) -> Self {
        Identity::String(match shape {
            Shape::Box => "box".into(),
            Shape::Polygon => "polygon".into(),
            Shape::Ellipse => "ellipse".into(),
            Shape::Oval => "oval".into(),
            Shape::Circle => "circle".into(),
            Shape::Point => "point".into(),
            Shape::Egg => "egg".into(),
            Shape::Triangle => "triangle".into(),
            Shape::Plaintext => "plaintext".into(),
            Shape::Plain => "plain".into(),
            Shape::Diamond => "diamond".into(),
            Shape::Trapezium => "trapezium".into(),
            Shape::Parallelogram => "parallelogram".into(),
            Shape::House => "house".into(),
            Shape::Pentagon => "pentagon".into(),
            Shape::Hexagon => "hexagon".into(),
            Shape::Septagon => "septagon".into(),
            Shape::Octagon => "octagon".into(),
            Shape::Doublecircle => "doublecircle".into(),
            Shape::Doubleoctagon => "doubleoctagon".into(),
            Shape::Tripleoctagon => "tripleoctagon".into(),
            Shape::Invtriangle => "invtriangle".into(),
            Shape::Invtrapezium => "invtrapezium".into(),
            Shape::Invhouse => "invhouse".into(),
            Shape::Mdiamond => "Mdiamond".into(),
            Shape::Msquare => "Msquare".into(),
            Shape::Mcircle => "Mcircle".into(),
            Shape::Rect => "rect".into(),
            Shape::Rectangle => "rectangle".into(),
            Shape::Square => "square".into(),
            Shape::Star => "star".into(),
            Shape::None => "none".into(),
            Shape::Underline => "underline".into(),
            Shape::Cylinder => "cylinder".into(),
            Shape::Note => "note".into(),
            Shape::Tab => "tab".into(),
            Shape::Folder => "folder".into(),
            Shape::Box3d => "box3d".into(),
            Shape::Component => "component".into(),
            Shape::Promoter => "promoter".into(),
            Shape::Cds => "cds".into(),
            Shape::Terminator => "terminator".into(),
            Shape::Utr => "utr".into(),
            Shape::Primersite => "primersite".into(),
            Shape::Restrictionsite => "restrictionsite".into(),
            Shape::Fivepoverhang => "fivepoverhang".into(),
            Shape::Threepoverhang => "threepoverhang".into(),
            Shape::Noverhang => "noverhang".into(),
            Shape::Assembly => "assembly".into(),
            Shape::Signature => "signature".into(),
            Shape::Insulator => "insulator".into(),
            Shape::Ribosite => "ribosite".into(),
            Shape::Rnastab => "rnastab".into(),
            Shape::Proteasesite => "proteasesite".into(),
            Shape::Proteinstab => "proteinstab".into(),
            Shape::Rpromoter => "rpromoter".into(),
            Shape::Rarrow => "rarrow".into(),
            Shape::Larrow => "larrow".into(),
            Shape::Lpromoter => "lpromoter".into(),
        })
    }
}

fn arrow_str(ashape: ArrowShape) -> &'static str {
    match ashape {
        ArrowShape::Olbox => "olbox",
        ArrowShape::Olcrow => "olcrow",
        ArrowShape::Olcurve => "olcurve",
        ArrowShape::Olicurve => "olicurve",
        ArrowShape::Oldiamond => "oldiamond",
        ArrowShape::Oldot => "oldot",
        ArrowShape::Olinv => "olinv",
        ArrowShape::Olnone => "olnone",
        ArrowShape::Olnormal => "olnormal",
        ArrowShape::Oltee => "oltee",
        ArrowShape::Olvee => "olvee",
        ArrowShape::Orbox => "orbox",
        ArrowShape::Orcrow => "orcrow",
        ArrowShape::Orcurve => "orcurve",
        ArrowShape::Oricurve => "oricurve",
        ArrowShape::Ordiamond => "ordiamond",
        ArrowShape::Ordot => "ordot",
        ArrowShape::Orinv => "orinv",
        ArrowShape::Ornone => "ornone",
        ArrowShape::Ornormal => "ornormal",
        ArrowShape::Ortee => "ortee",
        ArrowShape::Orvee => "orvee",
        ArrowShape::Lbox => "lbox",
        ArrowShape::Lcrow => "lcrow",
        ArrowShape::Lcurve => "lcurve",
        ArrowShape::Licurve => "licurve",
        ArrowShape::Ldiamond => "ldiamond",
        ArrowShape::Ldot => "ldot",
        ArrowShape::Linv => "linv",
        ArrowShape::Lnone => "lnone",
        ArrowShape::Lnormal => "lnormal",
        ArrowShape::Ltee => "ltee",
        ArrowShape::Lvee => "lvee",
        ArrowShape::Rbox => "rbox",
        ArrowShape::Rcrow => "rcrow",
        ArrowShape::Rcurve => "rcurve",
        ArrowShape::Ricurve => "ricurve",
        ArrowShape::Rdiamond => "rdiamond",
        ArrowShape::Rdot => "rdot",
        ArrowShape::Rinv => "rinv",
        ArrowShape::Rnone => "rnone",
        ArrowShape::Rnormal => "rnormal",
        ArrowShape::Rtee => "rtee",
        ArrowShape::Rvee => "rvee",
        ArrowShape::Box => "box",
        ArrowShape::Crow => "crow",
        ArrowShape::Curve => "curve",
        ArrowShape::Icurve => "icurve",
        ArrowShape::Diamond => "diamond",
        ArrowShape::Dot => "dot",
        ArrowShape::Inv => "inv",
        ArrowShape::None => "none",
        ArrowShape::Normal => "normal",
        ArrowShape::Tee => "tee",
        ArrowShape::Vee => "vee",
    }
}

impl<'a> From<Color> for Identity<'a> {
    fn from(xc: Color) -> Self {
        if let Color::Rgb(r, g, b) = xc {
            return Identity::RGBA(r, g, b, 255);
        }
        if let Color::Rgba(r, g, b, a) = xc {
            return Identity::RGBA(r, g, b, a);
        }
        if let Color::HSV(h, s, v) = xc {
            return Identity::HSV(h, s, v);
        }
        Identity::String(match xc {
            Color::Aliceblue => "aliceblue".into(),
            Color::Antiquewhite => "antiquewhite".into(),
            Color::Antiquewhite1 => "antiquewhite1".into(),
            Color::Antiquewhite2 => "antiquewhite2".into(),
            Color::Antiquewhite3 => "antiquewhite3".into(),
            Color::Antiquewhite4 => "antiquewhite4".into(),
            Color::Aqua => "aqua".into(),
            Color::Aquamarine => "aquamarine".into(),
            Color::Aquamarine1 => "aquamarine1".into(),
            Color::Aquamarine2 => "aquamarine2".into(),
            Color::Aquamarine3 => "aquamarine3".into(),
            Color::Aquamarine4 => "aquamarine4".into(),
            Color::Azure => "azure".into(),
            Color::Azure1 => "azure1".into(),
            Color::Azure2 => "azure2".into(),
            Color::Azure3 => "azure3".into(),
            Color::Azure4 => "azure4".into(),
            Color::Beige => "beige".into(),
            Color::Bisque => "bisque".into(),
            Color::Bisque1 => "bisque1".into(),
            Color::Bisque2 => "bisque2".into(),
            Color::Bisque3 => "bisque3".into(),
            Color::Bisque4 => "bisque4".into(),
            Color::Black => "black".into(),
            Color::Blanchedalmond => "blanchedalmond".into(),
            Color::Blue => "blue".into(),
            Color::Blue1 => "blue1".into(),
            Color::Blue2 => "blue2".into(),
            Color::Blue3 => "blue3".into(),
            Color::Blue4 => "blue4".into(),
            Color::Blueviolet => "blueviolet".into(),
            Color::Brown => "brown".into(),
            Color::Brown1 => "brown1".into(),
            Color::Brown2 => "brown2".into(),
            Color::Brown3 => "brown3".into(),
            Color::Brown4 => "brown4".into(),
            Color::Burlywood => "burlywood".into(),
            Color::Burlywood1 => "burlywood1".into(),
            Color::Burlywood2 => "burlywood2".into(),
            Color::Burlywood3 => "burlywood3".into(),
            Color::Burlywood4 => "burlywood4".into(),
            Color::Cadetblue => "cadetblue".into(),
            Color::Cadetblue1 => "cadetblue1".into(),
            Color::Cadetblue2 => "cadetblue2".into(),
            Color::Cadetblue3 => "cadetblue3".into(),
            Color::Cadetblue4 => "cadetblue4".into(),
            Color::Chartreuse => "chartreuse".into(),
            Color::Chartreuse1 => "chartreuse1".into(),
            Color::Chartreuse2 => "chartreuse2".into(),
            Color::Chartreuse3 => "chartreuse3".into(),
            Color::Chartreuse4 => "chartreuse4".into(),
            Color::Chocolate => "chocolate".into(),
            Color::Chocolate1 => "chocolate1".into(),
            Color::Chocolate2 => "chocolate2".into(),
            Color::Chocolate3 => "chocolate3".into(),
            Color::Chocolate4 => "chocolate4".into(),
            Color::Coral => "coral".into(),
            Color::Coral1 => "coral1".into(),
            Color::Coral2 => "coral2".into(),
            Color::Coral3 => "coral3".into(),
            Color::Coral4 => "coral4".into(),
            Color::Cornflowerblue => "cornflowerblue".into(),
            Color::Cornsilk => "cornsilk".into(),
            Color::Cornsilk1 => "cornsilk1".into(),
            Color::Cornsilk2 => "cornsilk2".into(),
            Color::Cornsilk3 => "cornsilk3".into(),
            Color::Cornsilk4 => "cornsilk4".into(),
            Color::Crimson => "crimson".into(),
            Color::Cyan => "cyan".into(),
            Color::Cyan1 => "cyan1".into(),
            Color::Cyan2 => "cyan2".into(),
            Color::Cyan3 => "cyan3".into(),
            Color::Cyan4 => "cyan4".into(),
            Color::Darkblue => "darkblue".into(),
            Color::Darkcyan => "darkcyan".into(),
            Color::Darkgoldenrod => "darkgoldenrod".into(),
            Color::Darkgoldenrod1 => "darkgoldenrod1".into(),
            Color::Darkgoldenrod2 => "darkgoldenrod2".into(),
            Color::Darkgoldenrod3 => "darkgoldenrod3".into(),
            Color::Darkgoldenrod4 => "darkgoldenrod4".into(),
            Color::Darkgray => "darkgray".into(),
            Color::Darkgreen => "darkgreen".into(),
            Color::Darkgrey => "darkgrey".into(),
            Color::Darkkhaki => "darkkhaki".into(),
            Color::Darkmagenta => "darkmagenta".into(),
            Color::Darkolivegreen => "darkolivegreen".into(),
            Color::Darkolivegreen1 => "darkolivegreen1".into(),
            Color::Darkolivegreen2 => "darkolivegreen2".into(),
            Color::Darkolivegreen3 => "darkolivegreen3".into(),
            Color::Darkolivegreen4 => "darkolivegreen4".into(),
            Color::Darkorange => "darkorange".into(),
            Color::Darkorange1 => "darkorange1".into(),
            Color::Darkorange2 => "darkorange2".into(),
            Color::Darkorange3 => "darkorange3".into(),
            Color::Darkorange4 => "darkorange4".into(),
            Color::Darkorchid => "darkorchid".into(),
            Color::Darkorchid1 => "darkorchid1".into(),
            Color::Darkorchid2 => "darkorchid2".into(),
            Color::Darkorchid3 => "darkorchid3".into(),
            Color::Darkorchid4 => "darkorchid4".into(),
            Color::Darkred => "darkred".into(),
            Color::Darksalmon => "darksalmon".into(),
            Color::Darkseagreen => "darkseagreen".into(),
            Color::Darkseagreen1 => "darkseagreen1".into(),
            Color::Darkseagreen2 => "darkseagreen2".into(),
            Color::Darkseagreen3 => "darkseagreen3".into(),
            Color::Darkseagreen4 => "darkseagreen4".into(),
            Color::Darkslateblue => "darkslateblue".into(),
            Color::Darkslategray => "darkslategray".into(),
            Color::Darkslategray1 => "darkslategray1".into(),
            Color::Darkslategray2 => "darkslategray2".into(),
            Color::Darkslategray3 => "darkslategray3".into(),
            Color::Darkslategray4 => "darkslategray4".into(),
            Color::Darkslategrey => "darkslategrey".into(),
            Color::Darkturquoise => "darkturquoise".into(),
            Color::Darkviolet => "darkviolet".into(),
            Color::Deeppink => "deeppink".into(),
            Color::Deeppink1 => "deeppink1".into(),
            Color::Deeppink2 => "deeppink2".into(),
            Color::Deeppink3 => "deeppink3".into(),
            Color::Deeppink4 => "deeppink4".into(),
            Color::Deepskyblue => "deepskyblue".into(),
            Color::Deepskyblue1 => "deepskyblue1".into(),
            Color::Deepskyblue2 => "deepskyblue2".into(),
            Color::Deepskyblue3 => "deepskyblue3".into(),
            Color::Deepskyblue4 => "deepskyblue4".into(),
            Color::Dimgray => "dimgray".into(),
            Color::Dimgrey => "dimgrey".into(),
            Color::Dodgerblue => "dodgerblue".into(),
            Color::Dodgerblue1 => "dodgerblue1".into(),
            Color::Dodgerblue2 => "dodgerblue2".into(),
            Color::Dodgerblue3 => "dodgerblue3".into(),
            Color::Dodgerblue4 => "dodgerblue4".into(),
            Color::Firebrick => "firebrick".into(),
            Color::Firebrick1 => "firebrick1".into(),
            Color::Firebrick2 => "firebrick2".into(),
            Color::Firebrick3 => "firebrick3".into(),
            Color::Firebrick4 => "firebrick4".into(),
            Color::Floralwhite => "floralwhite".into(),
            Color::Forestgreen => "forestgreen".into(),
            Color::Fuchsia => "fuchsia".into(),
            Color::Gainsboro => "gainsboro".into(),
            Color::Ghostwhite => "ghostwhite".into(),
            Color::Gold => "gold".into(),
            Color::Gold1 => "gold1".into(),
            Color::Gold2 => "gold2".into(),
            Color::Gold3 => "gold3".into(),
            Color::Gold4 => "gold4".into(),
            Color::Goldenrod => "goldenrod".into(),
            Color::Goldenrod1 => "goldenrod1".into(),
            Color::Goldenrod2 => "goldenrod2".into(),
            Color::Goldenrod3 => "goldenrod3".into(),
            Color::Goldenrod4 => "goldenrod4".into(),
            Color::Gray => "gray".into(),
            Color::Gray0 => "gray0".into(),
            Color::Gray1 => "gray1".into(),
            Color::Gray10 => "gray10".into(),
            Color::Gray100 => "gray100".into(),
            Color::Gray11 => "gray11".into(),
            Color::Gray12 => "gray12".into(),
            Color::Gray13 => "gray13".into(),
            Color::Gray14 => "gray14".into(),
            Color::Gray15 => "gray15".into(),
            Color::Gray16 => "gray16".into(),
            Color::Gray17 => "gray17".into(),
            Color::Gray18 => "gray18".into(),
            Color::Gray19 => "gray19".into(),
            Color::Gray2 => "gray2".into(),
            Color::Gray20 => "gray20".into(),
            Color::Gray21 => "gray21".into(),
            Color::Gray22 => "gray22".into(),
            Color::Gray23 => "gray23".into(),
            Color::Gray24 => "gray24".into(),
            Color::Gray25 => "gray25".into(),
            Color::Gray26 => "gray26".into(),
            Color::Gray27 => "gray27".into(),
            Color::Gray28 => "gray28".into(),
            Color::Gray29 => "gray29".into(),
            Color::Gray3 => "gray3".into(),
            Color::Gray30 => "gray30".into(),
            Color::Gray31 => "gray31".into(),
            Color::Gray32 => "gray32".into(),
            Color::Gray33 => "gray33".into(),
            Color::Gray34 => "gray34".into(),
            Color::Gray35 => "gray35".into(),
            Color::Gray36 => "gray36".into(),
            Color::Gray37 => "gray37".into(),
            Color::Gray38 => "gray38".into(),
            Color::Gray39 => "gray39".into(),
            Color::Gray4 => "gray4".into(),
            Color::Gray40 => "gray40".into(),
            Color::Gray41 => "gray41".into(),
            Color::Gray42 => "gray42".into(),
            Color::Gray43 => "gray43".into(),
            Color::Gray44 => "gray44".into(),
            Color::Gray45 => "gray45".into(),
            Color::Gray46 => "gray46".into(),
            Color::Gray47 => "gray47".into(),
            Color::Gray48 => "gray48".into(),
            Color::Gray49 => "gray49".into(),
            Color::Gray5 => "gray5".into(),
            Color::Gray50 => "gray50".into(),
            Color::Gray51 => "gray51".into(),
            Color::Gray52 => "gray52".into(),
            Color::Gray53 => "gray53".into(),
            Color::Gray54 => "gray54".into(),
            Color::Gray55 => "gray55".into(),
            Color::Gray56 => "gray56".into(),
            Color::Gray57 => "gray57".into(),
            Color::Gray58 => "gray58".into(),
            Color::Gray59 => "gray59".into(),
            Color::Gray6 => "gray6".into(),
            Color::Gray60 => "gray60".into(),
            Color::Gray61 => "gray61".into(),
            Color::Gray62 => "gray62".into(),
            Color::Gray63 => "gray63".into(),
            Color::Gray64 => "gray64".into(),
            Color::Gray65 => "gray65".into(),
            Color::Gray66 => "gray66".into(),
            Color::Gray67 => "gray67".into(),
            Color::Gray68 => "gray68".into(),
            Color::Gray69 => "gray69".into(),
            Color::Gray7 => "gray7".into(),
            Color::Gray70 => "gray70".into(),
            Color::Gray71 => "gray71".into(),
            Color::Gray72 => "gray72".into(),
            Color::Gray73 => "gray73".into(),
            Color::Gray74 => "gray74".into(),
            Color::Gray75 => "gray75".into(),
            Color::Gray76 => "gray76".into(),
            Color::Gray77 => "gray77".into(),
            Color::Gray78 => "gray78".into(),
            Color::Gray79 => "gray79".into(),
            Color::Gray8 => "gray8".into(),
            Color::Gray80 => "gray80".into(),
            Color::Gray81 => "gray81".into(),
            Color::Gray82 => "gray82".into(),
            Color::Gray83 => "gray83".into(),
            Color::Gray84 => "gray84".into(),
            Color::Gray85 => "gray85".into(),
            Color::Gray86 => "gray86".into(),
            Color::Gray87 => "gray87".into(),
            Color::Gray88 => "gray88".into(),
            Color::Gray89 => "gray89".into(),
            Color::Gray9 => "gray9".into(),
            Color::Gray90 => "gray90".into(),
            Color::Gray91 => "gray91".into(),
            Color::Gray92 => "gray92".into(),
            Color::Gray93 => "gray93".into(),
            Color::Gray94 => "gray94".into(),
            Color::Gray95 => "gray95".into(),
            Color::Gray96 => "gray96".into(),
            Color::Gray97 => "gray97".into(),
            Color::Gray98 => "gray98".into(),
            Color::Gray99 => "gray99".into(),
            Color::Green => "green".into(),
            Color::Green1 => "green1".into(),
            Color::Green2 => "green2".into(),
            Color::Green3 => "green3".into(),
            Color::Green4 => "green4".into(),
            Color::Greenyellow => "greenyellow".into(),
            Color::Grey => "grey".into(),
            Color::Grey0 => "grey0".into(),
            Color::Grey1 => "grey1".into(),
            Color::Grey10 => "grey10".into(),
            Color::Grey100 => "grey100".into(),
            Color::Grey11 => "grey11".into(),
            Color::Grey12 => "grey12".into(),
            Color::Grey13 => "grey13".into(),
            Color::Grey14 => "grey14".into(),
            Color::Grey15 => "grey15".into(),
            Color::Grey16 => "grey16".into(),
            Color::Grey17 => "grey17".into(),
            Color::Grey18 => "grey18".into(),
            Color::Grey19 => "grey19".into(),
            Color::Grey2 => "grey2".into(),
            Color::Grey20 => "grey20".into(),
            Color::Grey21 => "grey21".into(),
            Color::Grey22 => "grey22".into(),
            Color::Grey23 => "grey23".into(),
            Color::Grey24 => "grey24".into(),
            Color::Grey25 => "grey25".into(),
            Color::Grey26 => "grey26".into(),
            Color::Grey27 => "grey27".into(),
            Color::Grey28 => "grey28".into(),
            Color::Grey29 => "grey29".into(),
            Color::Grey3 => "grey3".into(),
            Color::Grey30 => "grey30".into(),
            Color::Grey31 => "grey31".into(),
            Color::Grey32 => "grey32".into(),
            Color::Grey33 => "grey33".into(),
            Color::Grey34 => "grey34".into(),
            Color::Grey35 => "grey35".into(),
            Color::Grey36 => "grey36".into(),
            Color::Grey37 => "grey37".into(),
            Color::Grey38 => "grey38".into(),
            Color::Grey39 => "grey39".into(),
            Color::Grey4 => "grey4".into(),
            Color::Grey40 => "grey40".into(),
            Color::Grey41 => "grey41".into(),
            Color::Grey42 => "grey42".into(),
            Color::Grey43 => "grey43".into(),
            Color::Grey44 => "grey44".into(),
            Color::Grey45 => "grey45".into(),
            Color::Grey46 => "grey46".into(),
            Color::Grey47 => "grey47".into(),
            Color::Grey48 => "grey48".into(),
            Color::Grey49 => "grey49".into(),
            Color::Grey5 => "grey5".into(),
            Color::Grey50 => "grey50".into(),
            Color::Grey51 => "grey51".into(),
            Color::Grey52 => "grey52".into(),
            Color::Grey53 => "grey53".into(),
            Color::Grey54 => "grey54".into(),
            Color::Grey55 => "grey55".into(),
            Color::Grey56 => "grey56".into(),
            Color::Grey57 => "grey57".into(),
            Color::Grey58 => "grey58".into(),
            Color::Grey59 => "grey59".into(),
            Color::Grey6 => "grey6".into(),
            Color::Grey60 => "grey60".into(),
            Color::Grey61 => "grey61".into(),
            Color::Grey62 => "grey62".into(),
            Color::Grey63 => "grey63".into(),
            Color::Grey64 => "grey64".into(),
            Color::Grey65 => "grey65".into(),
            Color::Grey66 => "grey66".into(),
            Color::Grey67 => "grey67".into(),
            Color::Grey68 => "grey68".into(),
            Color::Grey69 => "grey69".into(),
            Color::Grey7 => "grey7".into(),
            Color::Grey70 => "grey70".into(),
            Color::Grey71 => "grey71".into(),
            Color::Grey72 => "grey72".into(),
            Color::Grey73 => "grey73".into(),
            Color::Grey74 => "grey74".into(),
            Color::Grey75 => "grey75".into(),
            Color::Grey76 => "grey76".into(),
            Color::Grey77 => "grey77".into(),
            Color::Grey78 => "grey78".into(),
            Color::Grey79 => "grey79".into(),
            Color::Grey8 => "grey8".into(),
            Color::Grey80 => "grey80".into(),
            Color::Grey81 => "grey81".into(),
            Color::Grey82 => "grey82".into(),
            Color::Grey83 => "grey83".into(),
            Color::Grey84 => "grey84".into(),
            Color::Grey85 => "grey85".into(),
            Color::Grey86 => "grey86".into(),
            Color::Grey87 => "grey87".into(),
            Color::Grey88 => "grey88".into(),
            Color::Grey89 => "grey89".into(),
            Color::Grey9 => "grey9".into(),
            Color::Grey90 => "grey90".into(),
            Color::Grey91 => "grey91".into(),
            Color::Grey92 => "grey92".into(),
            Color::Grey93 => "grey93".into(),
            Color::Grey94 => "grey94".into(),
            Color::Grey95 => "grey95".into(),
            Color::Grey96 => "grey96".into(),
            Color::Grey97 => "grey97".into(),
            Color::Grey98 => "grey98".into(),
            Color::Grey99 => "grey99".into(),
            Color::Honeydew => "honeydew".into(),
            Color::Honeydew1 => "honeydew1".into(),
            Color::Honeydew2 => "honeydew2".into(),
            Color::Honeydew3 => "honeydew3".into(),
            Color::Honeydew4 => "honeydew4".into(),
            Color::Hotpink => "hotpink".into(),
            Color::Hotpink1 => "hotpink1".into(),
            Color::Hotpink2 => "hotpink2".into(),
            Color::Hotpink3 => "hotpink3".into(),
            Color::Hotpink4 => "hotpink4".into(),
            Color::Indianred => "indianred".into(),
            Color::Indianred1 => "indianred1".into(),
            Color::Indianred2 => "indianred2".into(),
            Color::Indianred3 => "indianred3".into(),
            Color::Indianred4 => "indianred4".into(),
            Color::Indigo => "indigo".into(),
            Color::Invis => "invis".into(),
            Color::Ivory => "ivory".into(),
            Color::Ivory1 => "ivory1".into(),
            Color::Ivory2 => "ivory2".into(),
            Color::Ivory3 => "ivory3".into(),
            Color::Ivory4 => "ivory4".into(),
            Color::Khaki => "khaki".into(),
            Color::Khaki1 => "khaki1".into(),
            Color::Khaki2 => "khaki2".into(),
            Color::Khaki3 => "khaki3".into(),
            Color::Khaki4 => "khaki4".into(),
            Color::Lavender => "lavender".into(),
            Color::Lavenderblush => "lavenderblush".into(),
            Color::Lavenderblush1 => "lavenderblush1".into(),
            Color::Lavenderblush2 => "lavenderblush2".into(),
            Color::Lavenderblush3 => "lavenderblush3".into(),
            Color::Lavenderblush4 => "lavenderblush4".into(),
            Color::Lawngreen => "lawngreen".into(),
            Color::Lemonchiffon => "lemonchiffon".into(),
            Color::Lemonchiffon1 => "lemonchiffon1".into(),
            Color::Lemonchiffon2 => "lemonchiffon2".into(),
            Color::Lemonchiffon3 => "lemonchiffon3".into(),
            Color::Lemonchiffon4 => "lemonchiffon4".into(),
            Color::Lightblue => "lightblue".into(),
            Color::Lightblue1 => "lightblue1".into(),
            Color::Lightblue2 => "lightblue2".into(),
            Color::Lightblue3 => "lightblue3".into(),
            Color::Lightblue4 => "lightblue4".into(),
            Color::Lightcoral => "lightcoral".into(),
            Color::Lightcyan => "lightcyan".into(),
            Color::Lightcyan1 => "lightcyan1".into(),
            Color::Lightcyan2 => "lightcyan2".into(),
            Color::Lightcyan3 => "lightcyan3".into(),
            Color::Lightcyan4 => "lightcyan4".into(),
            Color::Lightgoldenrod => "lightgoldenrod".into(),
            Color::Lightgoldenrod1 => "lightgoldenrod1".into(),
            Color::Lightgoldenrod2 => "lightgoldenrod2".into(),
            Color::Lightgoldenrod3 => "lightgoldenrod3".into(),
            Color::Lightgoldenrod4 => "lightgoldenrod4".into(),
            Color::Lightgoldenrodyellow => "lightgoldenrodyellow".into(),
            Color::Lightgray => "lightgray".into(),
            Color::Lightgreen => "lightgreen".into(),
            Color::Lightgrey => "lightgrey".into(),
            Color::Lightpink => "lightpink".into(),
            Color::Lightpink1 => "lightpink1".into(),
            Color::Lightpink2 => "lightpink2".into(),
            Color::Lightpink3 => "lightpink3".into(),
            Color::Lightpink4 => "lightpink4".into(),
            Color::Lightsalmon => "lightsalmon".into(),
            Color::Lightsalmon1 => "lightsalmon1".into(),
            Color::Lightsalmon2 => "lightsalmon2".into(),
            Color::Lightsalmon3 => "lightsalmon3".into(),
            Color::Lightsalmon4 => "lightsalmon4".into(),
            Color::Lightseagreen => "lightseagreen".into(),
            Color::Lightskyblue => "lightskyblue".into(),
            Color::Lightskyblue1 => "lightskyblue1".into(),
            Color::Lightskyblue2 => "lightskyblue2".into(),
            Color::Lightskyblue3 => "lightskyblue3".into(),
            Color::Lightskyblue4 => "lightskyblue4".into(),
            Color::Lightslateblue => "lightslateblue".into(),
            Color::Lightslategray => "lightslategray".into(),
            Color::Lightslategrey => "lightslategrey".into(),
            Color::Lightsteelblue => "lightsteelblue".into(),
            Color::Lightsteelblue1 => "lightsteelblue1".into(),
            Color::Lightsteelblue2 => "lightsteelblue2".into(),
            Color::Lightsteelblue3 => "lightsteelblue3".into(),
            Color::Lightsteelblue4 => "lightsteelblue4".into(),
            Color::Lightyellow => "lightyellow".into(),
            Color::Lightyellow1 => "lightyellow1".into(),
            Color::Lightyellow2 => "lightyellow2".into(),
            Color::Lightyellow3 => "lightyellow3".into(),
            Color::Lightyellow4 => "lightyellow4".into(),
            Color::Lime => "lime".into(),
            Color::Limegreen => "limegreen".into(),
            Color::Linen => "linen".into(),
            Color::Magenta => "magenta".into(),
            Color::Magenta1 => "magenta1".into(),
            Color::Magenta2 => "magenta2".into(),
            Color::Magenta3 => "magenta3".into(),
            Color::Magenta4 => "magenta4".into(),
            Color::Maroon => "maroon".into(),
            Color::Maroon1 => "maroon1".into(),
            Color::Maroon2 => "maroon2".into(),
            Color::Maroon3 => "maroon3".into(),
            Color::Maroon4 => "maroon4".into(),
            Color::Mediumaquamarine => "mediumaquamarine".into(),
            Color::Mediumblue => "mediumblue".into(),
            Color::Mediumorchid => "mediumorchid".into(),
            Color::Mediumorchid1 => "mediumorchid1".into(),
            Color::Mediumorchid2 => "mediumorchid2".into(),
            Color::Mediumorchid3 => "mediumorchid3".into(),
            Color::Mediumorchid4 => "mediumorchid4".into(),
            Color::Mediumpurple => "mediumpurple".into(),
            Color::Mediumpurple1 => "mediumpurple1".into(),
            Color::Mediumpurple2 => "mediumpurple2".into(),
            Color::Mediumpurple3 => "mediumpurple3".into(),
            Color::Mediumpurple4 => "mediumpurple4".into(),
            Color::Mediumseagreen => "mediumseagreen".into(),
            Color::Mediumslateblue => "mediumslateblue".into(),
            Color::Mediumspringgreen => "mediumspringgreen".into(),
            Color::Mediumturquoise => "mediumturquoise".into(),
            Color::Mediumvioletred => "mediumvioletred".into(),
            Color::Midnightblue => "midnightblue".into(),
            Color::Mintcream => "mintcream".into(),
            Color::Mistyrose => "mistyrose".into(),
            Color::Mistyrose1 => "mistyrose1".into(),
            Color::Mistyrose2 => "mistyrose2".into(),
            Color::Mistyrose3 => "mistyrose3".into(),
            Color::Mistyrose4 => "mistyrose4".into(),
            Color::Moccasin => "moccasin".into(),
            Color::Navajowhite => "navajowhite".into(),
            Color::Navajowhite1 => "navajowhite1".into(),
            Color::Navajowhite2 => "navajowhite2".into(),
            Color::Navajowhite3 => "navajowhite3".into(),
            Color::Navajowhite4 => "navajowhite4".into(),
            Color::Navy => "navy".into(),
            Color::Navyblue => "navyblue".into(),
            Color::None => "none".into(),
            Color::Oldlace => "oldlace".into(),
            Color::Olive => "olive".into(),
            Color::Olivedrab => "olivedrab".into(),
            Color::Olivedrab1 => "olivedrab1".into(),
            Color::Olivedrab2 => "olivedrab2".into(),
            Color::Olivedrab3 => "olivedrab3".into(),
            Color::Olivedrab4 => "olivedrab4".into(),
            Color::Orange => "orange".into(),
            Color::Orange1 => "orange1".into(),
            Color::Orange2 => "orange2".into(),
            Color::Orange3 => "orange3".into(),
            Color::Orange4 => "orange4".into(),
            Color::Orangered => "orangered".into(),
            Color::Orangered1 => "orangered1".into(),
            Color::Orangered2 => "orangered2".into(),
            Color::Orangered3 => "orangered3".into(),
            Color::Orangered4 => "orangered4".into(),
            Color::Orchid => "orchid".into(),
            Color::Orchid1 => "orchid1".into(),
            Color::Orchid2 => "orchid2".into(),
            Color::Orchid3 => "orchid3".into(),
            Color::Orchid4 => "orchid4".into(),
            Color::Palegoldenrod => "palegoldenrod".into(),
            Color::Palegreen => "palegreen".into(),
            Color::Palegreen1 => "palegreen1".into(),
            Color::Palegreen2 => "palegreen2".into(),
            Color::Palegreen3 => "palegreen3".into(),
            Color::Palegreen4 => "palegreen4".into(),
            Color::Paleturquoise => "paleturquoise".into(),
            Color::Paleturquoise1 => "paleturquoise1".into(),
            Color::Paleturquoise2 => "paleturquoise2".into(),
            Color::Paleturquoise3 => "paleturquoise3".into(),
            Color::Paleturquoise4 => "paleturquoise4".into(),
            Color::Palevioletred => "palevioletred".into(),
            Color::Palevioletred1 => "palevioletred1".into(),
            Color::Palevioletred2 => "palevioletred2".into(),
            Color::Palevioletred3 => "palevioletred3".into(),
            Color::Palevioletred4 => "palevioletred4".into(),
            Color::Papayawhip => "papayawhip".into(),
            Color::Peachpuff => "peachpuff".into(),
            Color::Peachpuff1 => "peachpuff1".into(),
            Color::Peachpuff2 => "peachpuff2".into(),
            Color::Peachpuff3 => "peachpuff3".into(),
            Color::Peachpuff4 => "peachpuff4".into(),
            Color::Peru => "peru".into(),
            Color::Pink => "pink".into(),
            Color::Pink1 => "pink1".into(),
            Color::Pink2 => "pink2".into(),
            Color::Pink3 => "pink3".into(),
            Color::Pink4 => "pink4".into(),
            Color::Plum => "plum".into(),
            Color::Plum1 => "plum1".into(),
            Color::Plum2 => "plum2".into(),
            Color::Plum3 => "plum3".into(),
            Color::Plum4 => "plum4".into(),
            Color::Powderblue => "powderblue".into(),
            Color::Purple => "purple".into(),
            Color::Purple1 => "purple1".into(),
            Color::Purple2 => "purple2".into(),
            Color::Purple3 => "purple3".into(),
            Color::Purple4 => "purple4".into(),
            Color::Red => "red".into(),
            Color::Red1 => "red1".into(),
            Color::Red2 => "red2".into(),
            Color::Red3 => "red3".into(),
            Color::Red4 => "red4".into(),
            Color::Rosybrown => "rosybrown".into(),
            Color::Rosybrown1 => "rosybrown1".into(),
            Color::Rosybrown2 => "rosybrown2".into(),
            Color::Rosybrown3 => "rosybrown3".into(),
            Color::Rosybrown4 => "rosybrown4".into(),
            Color::Royalblue => "royalblue".into(),
            Color::Royalblue1 => "royalblue1".into(),
            Color::Royalblue2 => "royalblue2".into(),
            Color::Royalblue3 => "royalblue3".into(),
            Color::Royalblue4 => "royalblue4".into(),
            Color::Saddlebrown => "saddlebrown".into(),
            Color::Salmon => "salmon".into(),
            Color::Salmon1 => "salmon1".into(),
            Color::Salmon2 => "salmon2".into(),
            Color::Salmon3 => "salmon3".into(),
            Color::Salmon4 => "salmon4".into(),
            Color::Sandybrown => "sandybrown".into(),
            Color::Seagreen => "seagreen".into(),
            Color::Seagreen1 => "seagreen1".into(),
            Color::Seagreen2 => "seagreen2".into(),
            Color::Seagreen3 => "seagreen3".into(),
            Color::Seagreen4 => "seagreen4".into(),
            Color::Seashell => "seashell".into(),
            Color::Seashell1 => "seashell1".into(),
            Color::Seashell2 => "seashell2".into(),
            Color::Seashell3 => "seashell3".into(),
            Color::Seashell4 => "seashell4".into(),
            Color::Sienna => "sienna".into(),
            Color::Sienna1 => "sienna1".into(),
            Color::Sienna2 => "sienna2".into(),
            Color::Sienna3 => "sienna3".into(),
            Color::Sienna4 => "sienna4".into(),
            Color::Silver => "silver".into(),
            Color::Skyblue => "skyblue".into(),
            Color::Skyblue1 => "skyblue1".into(),
            Color::Skyblue2 => "skyblue2".into(),
            Color::Skyblue3 => "skyblue3".into(),
            Color::Skyblue4 => "skyblue4".into(),
            Color::Slateblue => "slateblue".into(),
            Color::Slateblue1 => "slateblue1".into(),
            Color::Slateblue2 => "slateblue2".into(),
            Color::Slateblue3 => "slateblue3".into(),
            Color::Slateblue4 => "slateblue4".into(),
            Color::Slategray => "slategray".into(),
            Color::Slategray1 => "slategray1".into(),
            Color::Slategray2 => "slategray2".into(),
            Color::Slategray3 => "slategray3".into(),
            Color::Slategray4 => "slategray4".into(),
            Color::Slategrey => "slategrey".into(),
            Color::Snow => "snow".into(),
            Color::Snow1 => "snow1".into(),
            Color::Snow2 => "snow2".into(),
            Color::Snow3 => "snow3".into(),
            Color::Snow4 => "snow4".into(),
            Color::Springgreen => "springgreen".into(),
            Color::Springgreen1 => "springgreen1".into(),
            Color::Springgreen2 => "springgreen2".into(),
            Color::Springgreen3 => "springgreen3".into(),
            Color::Springgreen4 => "springgreen4".into(),
            Color::Steelblue => "steelblue".into(),
            Color::Steelblue1 => "steelblue1".into(),
            Color::Steelblue2 => "steelblue2".into(),
            Color::Steelblue3 => "steelblue3".into(),
            Color::Steelblue4 => "steelblue4".into(),
            Color::Tan => "tan".into(),
            Color::Tan1 => "tan1".into(),
            Color::Tan2 => "tan2".into(),
            Color::Tan3 => "tan3".into(),
            Color::Tan4 => "tan4".into(),
            Color::Teal => "teal".into(),
            Color::Thistle => "thistle".into(),
            Color::Thistle1 => "thistle1".into(),
            Color::Thistle2 => "thistle2".into(),
            Color::Thistle3 => "thistle3".into(),
            Color::Thistle4 => "thistle4".into(),
            Color::Tomato => "tomato".into(),
            Color::Tomato1 => "tomato1".into(),
            Color::Tomato2 => "tomato2".into(),
            Color::Tomato3 => "tomato3".into(),
            Color::Tomato4 => "tomato4".into(),
            Color::Transparent => "transparent".into(),
            Color::Turquoise => "turquoise".into(),
            Color::Turquoise1 => "turquoise1".into(),
            Color::Turquoise2 => "turquoise2".into(),
            Color::Turquoise3 => "turquoise3".into(),
            Color::Turquoise4 => "turquoise4".into(),
            Color::Violet => "violet".into(),
            Color::Violetred => "violetred".into(),
            Color::Violetred1 => "violetred1".into(),
            Color::Violetred2 => "violetred2".into(),
            Color::Violetred3 => "violetred3".into(),
            Color::Violetred4 => "violetred4".into(),
            Color::Wheat => "wheat".into(),
            Color::Wheat1 => "wheat1".into(),
            Color::Wheat2 => "wheat2".into(),
            Color::Wheat3 => "wheat3".into(),
            Color::Wheat4 => "wheat4".into(),
            Color::White => "white".into(),
            Color::Whitesmoke => "whitesmoke".into(),
            Color::Yellow => "yellow".into(),
            Color::Yellow1 => "yellow1".into(),
            Color::Yellow2 => "yellow2".into(),
            Color::Yellow3 => "yellow3".into(),
            Color::Yellow4 => "yellow4".into(),
            Color::Yellowgreen => "yellowgreen".into(),
            _ => unsafe { unreachable_unchecked() },
        })
    }
}
